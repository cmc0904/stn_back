<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sungil.management.repository.users.UserRepository">

    <resultMap id="userResult" type="sungil.management.vo.user.UserVO">
        <id property="userId" column="userId"/>
        <result property="userPassword" column="password"/>
        <result property="userName" column="name"/>
        <result property="userEmail" column="email"/>
        <result property="userAddress" column="address"/>
        <result property="userPhone" column="phone"/>
        <result property="userGender" column="gender"/>
        <result property="createAt" column="createAt"/>
    </resultMap>

    <select id="getAllUsers" resultMap="userResult">
        SELECT * FROM stn_users
    </select>

    <select id="getAllUserTotalLength" resultType ="int">
        SELECT count(*) FROM stn_users
    </select>


    <select id="searchUserBy" resultMap="userResult">
        SELECT *
        FROM stn_users
        <where>
            <if test='"userId".equals(type)'>
                userId LIKE CONCAT(#{content}, '%')
            </if>
            <if test='"name".equals(type)'>
                `name` LIKE CONCAT(#{content}, '%')
            </if>
        </where>
        order by createAt desc

        LIMIT 5 OFFSET #{offset}
    </select>

    <select id="searchUserTotalLength" resultType ="int">
        SELECT count(*)
        FROM stn_users
        <where>
            <if test='"userId".equals(type)'>
                userId LIKE CONCAT(#{content}, '%')
            </if>
            <if test='"name".equals(type)'>
                `name` LIKE CONCAT(#{content}, '%')
            </if>
        </where>

    </select>


    <select id="getAdminByPage" resultMap="userResult">
        SELECT *
        FROM stn_users usr, stn_roles role
        where usr.userId = role.userId and role.role = "Admin"
        order by usr.createAt desc
        LIMIT 5 OFFSET #{offset}
    </select>

    <select id="getAdminTotalLength" resultType ="int">
        SELECT count(*)
        FROM stn_users usr, stn_roles role
        where usr.userId = role.userId and role.role = "Admin"
    </select>

    <select id="getAllAdmins" resultMap="userResult">
        SELECT u.* FROM stn_users u, stn_roles r WHERE u.userId = r.userId AND r.role = 'Admin'
    </select>

    <select id="getUserByUserId" resultMap="userResult">
        SELECT * FROM stn_users WHERE userId = #{userId}
    </select>

    <select id="getUserByUserIdAndPassword" resultMap="userResult">
        SELECT * FROM stn_users WHERE userId = #{userId} AND password = #{password}
    </select>

    <select id="getRoleByUserId" resultType="java.lang.String">
        SELECT role FROM stn_roles WHERE userId = #{userId}
    </select>

    <insert id="insertUser" parameterType="sungil.management.dto.user.UserDTO">
        INSERT INTO stn_users(userId, password, name, email, address, phone, gender, createAt)
        VALUES(#{userId}, #{userPassword}, #{userName}, #{userEmail}, #{userAddress}, #{userPhone}, #{userGender}, NOW())
    </insert>

    <insert id="addRole">
        INSERT INTO stn_roles(userId, role) VALUES(#{userId}, #{role})
    </insert>

    <delete id="deleteUserByUserId">
        DELETE FROM stn_users WHERE userId = #{userId}
    </delete>

    <update id="updateUser" parameterType="sungil.management.dto.user.UserDTO">
        UPDATE stn_users SET
        name = #{userName}, email = #{userEmail}, address = #{userAddress},
        phone = #{userPhone}, gender = #{userGender} WHERE userId = #{userId}
    </update>


    <select id="getJoinDataForChartData" resultType="sungil.management.vo.user.JoinDayForChartData">
        <![CDATA[
        WITH RECURSIVE T AS (
            SELECT LAST_DAY(now() - INTERVAL 1 MONTH) + INTERVAL 1 DAY AS startDate
        UNION ALL
        SELECT startDate + INTERVAL 1 DAY FROM T WHERE startDate < LAST_DAY(now())
            )
        SELECT DATE_FORMAT(T.startDate, '%d') AS day, COALESCE(user_count, 0) AS count
        FROM T
            LEFT JOIN (
            SELECT DATE_FORMAT(createAt, '%d') AS day, COUNT(*) AS user_count
            FROM stn_users
            WHERE DATE_FORMAT(createAt, '%m') = DATE_FORMAT(now(), '%m')
            GROUP BY DATE_FORMAT(createAt, '%d')
            ) AS user_stats ON DATE_FORMAT(T.startDate, '%d') = user_stats.day
            LIMIT 5 OFFSET #{offset};
        ]]>
    </select>

    <select id="getJoinDataForChartDataLength" resultType="int">
        <![CDATA[
        WITH RECURSIVE T AS (
            SELECT LAST_DAY(now() - INTERVAL 1 MONTH) + INTERVAL 1 DAY AS startDate
        UNION ALL
        SELECT startDate + INTERVAL 1 DAY FROM T WHERE startDate < LAST_DAY(now())
            )

        select COUNT(*) FROM (
             SELECT DATE_FORMAT(T.startDate, '%d') AS day, COALESCE(user_count, 0) AS count
             FROM T
                 LEFT JOIN (
                 SELECT DATE_FORMAT(createAt, '%d') AS day, COUNT(*) AS user_count
                 FROM stn_users
                 WHERE DATE_FORMAT(createAt, '%m') = DATE_FORMAT(now(), '%m')
                 GROUP BY DATE_FORMAT(createAt, '%d')
                 ) AS user_stats ON DATE_FORMAT(T.startDate, '%d') = user_stats.day
         ) AS tb
        ]]>

    </select>


</mapper>
