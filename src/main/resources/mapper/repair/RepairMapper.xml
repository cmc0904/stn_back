<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sungil.management.repository.repair.RepaireRepository">

    <resultMap id="repairViewResult" type="sungil.management.vo.repair.RepairVO">
        <id property="idx" column="idx"/>
        <result property="customerUserId" column="customerUserId"/>
        <result property="problemTitle" column="problemTitle"/>
        <result property="problemComment" column="problemComment"/>
        <result column="createAt" property="createAt" jdbcType="TIMESTAMP" javaType="java.time.LocalDateTime"/>
        <result property="name" column="name"/>
        <result property="address" column="address"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="gender" column="gender"/>
        <result property="adminId" column="adminId"/>
        <result column="visitDate" property="visitDate" jdbcType="TIMESTAMP" javaType="java.time.LocalDateTime"/>
        <result property="finished" column="finished"/>
        <result property="rIdx" column="rIdx"/>

    </resultMap>

    <insert id="insertRepaire" parameterType="sungil.management.dto.repair.RepairResponseDTO">
        insert into stn_repair(customerUserId, problemTitle, problemComment, createAt)
        values (#{customerUserId}, #{problemTitle}, #{problemComment}, NOW())
    </insert>

    <select id="getAllRepairStatus" resultMap="repairViewResult">
        SELECT r.idx, r.customerUserId, r.problemTitle, r.problemComment, DATE_FORMAT(r.createAt, '%Y-%m-%d %H:%i:%s') as createAt,
               u.name, u.address, u.email, u.phone, u.gender, rr.adminId, rr.finished, DATE_FORMAT(rr.visitDate, '%Y-%m-%d %H:%i:%s') as visitDate, rr.idx as rIdx
        FROM stn_repair r
                 JOIN stn_users u ON u.userId = r.customerUserId
                 LEFT JOIN stn_repair_result rr ON rr.repairIdx = r.idx
    </select>

    <select id="getRepairDataType" resultMap="repairViewResult">
        SELECT r.idx, r.customerUserId, r.problemTitle, r.problemComment, DATE_FORMAT(r.createAt, '%Y-%m-%d %H:%i:%s') as createAt,
               u.name, u.address, u.email, u.phone, u.gender, rr.adminId, rr.finished, DATE_FORMAT(rr.visitDate, '%Y-%m-%d %H:%i:%s') as visitDate, rr.idx as rIdx
        FROM stn_repair r
                 JOIN stn_users u ON u.userId = r.customerUserId
                 LEFT JOIN stn_repair_result rr ON rr.repairIdx = r.idx
        <if test='!("ALL_DATA".equals(type))'>
            <where>
                <if test='"WILL_VISIT".equals(type)'>
                    rr.adminId IS NOT NULL AND rr.finished = 0
                </if>

                <if test='"WAITING".equals(type)'>
                    rr.adminId IS NULL
                </if>

                <if test='"COMPLETE".equals(type)'>
                    rr.adminId IS NOT NULL AND rr.finished = 1
                </if>
            </where>
        </if>

    </select>


    <select id="searchRepair" resultMap="repairViewResult">
        SELECT r.idx, r.customerUserId, r.problemTitle, r.problemComment, DATE_FORMAT(r.createAt, '%Y-%m-%d %H:%i:%s') as createAt,
        u.name, u.address, u.email, u.phone, u.gender, rr.adminId, rr.finished, DATE_FORMAT(rr.visitDate, '%Y-%m-%d %H:%i:%s') as visitDate, rr.idx as rIdx
        FROM stn_repair r
        JOIN stn_users u ON u.userId = r.customerUserId
        LEFT JOIN stn_repair_result rr ON rr.repairIdx = r.idx

        <choose>
            <when test='!("ALL_DATA".equals(type))'>
                <where>
                    <if test='"WILL_VISIT".equals(type)'>
                        rr.adminId IS NOT NULL AND rr.finished = 0
                    </if>

                    <if test='"WAITING".equals(type)'>
                        rr.adminId IS NULL
                    </if>

                    <if test='"COMPLETE".equals(type)'>
                        rr.adminId IS NOT NULL AND rr.finished = 1
                    </if>
                </where>

                and u.userId = #{userId}
            </when>
            <otherwise>
                where u.userId = #{userId}
            </otherwise>
        </choose>
    </select>


    <insert id="insertRepairResult" parameterType="sungil.management.dto.repair.RepairResponseDTO">
        insert into stn_repair_result(repairIdx, adminId, visitDate)
        values (#{repairIdx}, #{adminId}, #{visitDate})
    </insert>

    <select id="getRepairStatusByUserId" resultMap="repairViewResult" parameterType="String">
        SELECT r.idx, r.customerUserId, r.problemTitle, r.problemComment, r.createAt,
               u.name, u.address, u.email, u.phone, u.gender, rr.adminId, rr.visitDate, rr.finished
        FROM stn_repair r
                 JOIN stn_users u ON u.userId = r.customerUserId
                 LEFT JOIN stn_repair_result rr ON rr.repairIdx = r.idx
        WHERE u.userId = #{userId}
    </select>

    <update id="updateRepairFlagToOne">
        update stn_repair_result set finished = 1 where repairIdx = #{idx}
    </update>

    <update id="updateAdminIdAndVisitTime" parameterType="sungil.management.dto.repair.UpdateRepairResponseDTO">
        update stn_repair_result set adminId = #{adminId}, visitDate = #{visitDate} where idx = #{repairResponseIdx}
    </update>

</mapper>
