<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sungil.management.repository.board.board.BoardRepository">


    <select id="getAllBoard" resultType="sungil.management.vo.board.BoardVO">
        SELECT idx as boardIdx, title as boardTitle, detail as boardDetail, writerId, createAt
        FROM stn_board
        WHERE private = 0
        ORDER BY createAt DESC
    </select>


    <select id="getBoardBy" resultType="sungil.management.vo.board.BoardVO">
        SELECT idx as boardIdx, title as boardTitle, detail as boardDetail, writerId, DATE_FORMAT(createAt, '%Y-%m-%d %H:%i:%s') as createAt, (select count(*) from stn_board_reader WHERE stn_board.idx = stn_board_reader.boardIdx) AS views
        FROM stn_board
        <choose>
            <when test='!("all_data".equals(type))'>
                <where>
                    <if test='"title".equals(type)'>
                        title LIKE CONCAT(#{content}, '%')
                    </if>
                    <if test='"writerId".equals(type)'>
                        `writerId` = #{content}
                    </if>
                    <if test='"date".equals(type)'>
                        DATE_FORMAT(createAt, '%Y-%m-%d') = DATE_FORMAT(#{content}, '%Y-%m-%d')
                    </if>
                    and `private` = 0
                </where>
            </when>
            <otherwise>
                where `private` = 0
            </otherwise>

        </choose>

        ORDER BY createAt DESC
        LIMIT 5 OFFSET #{offset}
    </select>

    <select id="count" resultType="int">
        SELECT count(*)
        FROM stn_board
        <choose>
            <when test='!("all_data".equals(type))'>
                <where>
                    <if test='"title".equals(type)'>
                        title LIKE CONCAT(#{content}, '%')
                    </if>
                    <if test='"writerId".equals(type)'>
                        `writerId` = #{content}
                    </if>
                    <if test='"date".equals(type)'>
                        DATE_FORMAT(createAt, '%Y-%m-%d') = DATE_FORMAT(#{content}, '%Y-%m-%d')
                    </if>
                    and `private` = 0
                </where>
            </when>
            <otherwise>
                where `private` = 0
            </otherwise>

        </choose>

        ORDER BY createAt DESC
    </select>
    
    <update id="readBoard">
        INSERT INTO stn_board_reader (reader, boardIdx)
        SELECT #{reader}, #{boardIdx} FROM DUAL
        WHERE NOT EXISTS (
            SELECT * FROM stn_board_reader WHERE reader = #{reader} and boardIdx = #{boardIdx}
        );
    </update>

    <select id="getBoardByBoardIdx" parameterType="java.lang.Integer" resultType="sungil.management.vo.board.BoardVO">
        SELECT idx as boardIdx, title as boardTitle, detail as boardDetail, writerId, createAt
        FROM stn_board
        WHERE idx = #{boardIdx}
    </select>

    <select id="getBoardByWriterId" parameterType="java.lang.String" resultType="sungil.management.vo.board.BoardVO">
        SELECT idx as boardIdx, title as boardTitle, detail as boardDetail, writerId, createAt, `private` as isPrivate
        FROM stn_board
        WHERE writerId = #{writerId} and private = 0
        order by createAt desc
    </select>

    <update id="updateBoard" parameterType="sungil.management.vo.board.BoardVO">
        UPDATE stn_board
        SET title = #{boardTitle}, detail = #{boardDetail}
        WHERE idx = #{boardIdx} and private = 0
    </update>

    <insert id="insertBoard" parameterType="sungil.management.vo.board.BoardVO" useGeneratedKeys="true"
            keyProperty="boardIdx" keyColumn="idx">
        INSERT INTO stn_board (title, detail, writerId, createAt, `private`)
        VALUES (#{boardTitle}, #{boardDetail}, #{writerId}, NOW(), #{isPrivate})
    </insert>

    <delete id="deleteBoard" parameterType="int">
        DELETE FROM stn_board
        WHERE idx = #{boardIdx}
    </delete>

    <select id="getBoardListByPageNum" parameterType="int" resultType="sungil.management.vo.board.BoardVO">
        SELECT idx as boardIdx, title as boardTitle, detail as boardDetail, writerId, createAt
        FROM stn_board
        WHERE private = 0
        ORDER BY createAt DESC
            LIMIT #{limit}
    </select>

    <select id="findByTitleLIKE" parameterType="java.lang.String" resultType="sungil.management.vo.board.BoardVO">
        SELECT idx as boardIdx, title as boardTitle, detail as boardDetail, writerId, createAt
        FROM stn_board
        WHERE title LIKE CONCAT('%', #{findContent}, '%') and private = 0
        ORDER BY createAt DESC
    </select>

    <select id="findByCreatAt" parameterType="java.lang.String" resultType="sungil.management.vo.board.BoardVO">
        SELECT idx as boardIdx, title as boardTitle, detail as boardDetail, writerId, createAt
        FROM stn_board
        WHERE DATE_FORMAT(createAt, '%Y-%m-%d') = #{date} and private = 0
        ORDER BY createAt DESC
    </select>

    <insert id="saveFileName" parameterType="map">
        INSERT INTO stn_board_files (boardIdx, fileName)
        VALUES (#{boardIdx}, #{fileName})
    </insert>

    <select id="getAllFileNameByBoardIdx" parameterType="int" resultType="java.lang.String">
        SELECT fileName
        FROM stn_board_files
        WHERE boardIdx = #{boardIdx}
    </select>

    <update id="setPrivate" parameterType="map">
        UPDATE stn_board
        SET `private` = #{isPrivate}
        WHERE idx = #{boardIdx}
    </update>

    <select id="getMyBoards" parameterType="java.lang.String" resultType="sungil.management.vo.board.BoardVO">
        SELECT idx as boardIdx, title as boardTitle, detail as boardDetail, writerId, createAt, `private` as isPrivate
        FROM stn_board
        WHERE writerId = #{userId}
        order by createAt desc
    </select>

    <select id="getPostingDataForChartData" resultType="sungil.management.vo.board.PostingDayForChartData">
        <![CDATA[
            WITH RECURSIVE T AS (
                SELECT LAST_DAY(now() - INTERVAL 1 MONTH) + INTERVAL 1 DAY AS startDate
                UNION ALL
                SELECT startDate + INTERVAL 1 DAY FROM T WHERE startDate < LAST_DAY(now())
            )
            SELECT DATE_FORMAT(T.startDate, '%d') AS day, COALESCE(board_count, 0) AS count
            FROM T
            LEFT JOIN (
                SELECT DATE_FORMAT(createAt, '%d') AS day, COUNT(*) AS board_count
                FROM stn_board
                WHERE DATE_FORMAT(createAt, '%m') = DATE_FORMAT(now(), '%m')
                GROUP BY DATE_FORMAT(createAt, '%d')
            ) AS board_stats ON DATE_FORMAT(T.startDate, '%d') = board_stats.day
            LIMIT 5 OFFSET #{offset};


        ]]>
    </select>

    <select id="getPostingDataForChartDataLength" resultType="int">
        <![CDATA[
        WITH RECURSIVE T AS (
            SELECT LAST_DAY(now() - INTERVAL 1 MONTH) + INTERVAL 1 DAY AS startDate
            UNION ALL
            SELECT startDate + INTERVAL 1 DAY FROM T WHERE startDate < LAST_DAY(now())
        )

        select COUNT(*) FROM (
            SELECT DATE_FORMAT(T.startDate, '%d') AS day, COALESCE(board_count, 0) AS count
            FROM T
            LEFT JOIN (
                SELECT DATE_FORMAT(createAt, '%d') AS day, COUNT(*) AS board_count
                FROM stn_board
                WHERE DATE_FORMAT(createAt, '%m') = DATE_FORMAT(now(), '%m')
                GROUP BY DATE_FORMAT(createAt, '%d')
            ) AS board_stats ON DATE_FORMAT(T.startDate, '%d') = board_stats.day
        ) AS tb
        ]]>

    </select>

</mapper>
